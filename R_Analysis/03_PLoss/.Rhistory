plot(latenzVBQoS11500Byte$id, latenzVBQoS11500Byte$rtt, type = "l", main = "RTT QoS1_1500Byte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS110KByte$id, latenzVBQoS110KByte$rtt, type = "l", main = "RTT QoS1_10KByte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS1100KByte$id, latenzVBQoS1100KByte$rtt, type = "l", main = "RTT QoS1_100KByte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS1500KByte$id, latenzVBQoS1500KByte$rtt, type = "l", main = "RTT QoS1_1500KByte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS11MByte$id, latenzVBQoS11MByte$rtt, type = "l", main = "RTT QoS1_1MByte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS110MByte$id, latenzVBQoS110MByte$rtt, type = "l", main = "RTT QoS1_1M0Byte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
## QoS1 - Aufsplittung - eine Grafik!
plot(latenzVBQoS11Byte$id, latenzVBQoS11Byte$rtt, type = "l", ylim = c(0, 30), ylab = "RTT (in Sek)", xlab = "Paket_ID",
main = "Aufsplittung aller Messungen mit QoS_0 nach Paketgröße")
points(latenzVBQoS110Byte$id, latenzVBQoS110Byte$rtt, col = "red", type = "l")
points(latenzVBQoS1100Byte$id, latenzVBQoS1100Byte$rtt, col = "blue", type = "l")
points(latenzVBQoS11KByte$id, latenzVBQoS11KByte$rtt, col = "green4", type = "l")
points(latenzVBQoS11500Byte$id, latenzVBQoS11500Byte$rtt, col = "purple", type = "l")
points(latenzVBQoS110KByte$id, latenzVBQoS110KByte$rtt, col = "orange",  type = "l")
points(latenzVBQoS1100KByte$id, latenzVBQoS1100KByte$rtt, col = "pink", type = "l")
points(latenzVBQoS1500KByte$id, latenzVBQoS1500KByte$rtt, col = "brown", type = "l")
points(latenzVBQoS11MByte$id, latenzVBQoS11MByte$rtt, col = "yellow2", type = "l")
points(latenzVBQoS110MByte$id, latenzVBQoS110MByte$rtt, col = "gray", type = "l")
legend("right", c("1Byte", "10Byte", "100Byte", "1KByte", "1500Byte", "10KByte", "100KByte", "500KByte", "1MByte", "10MByte"),
cex = 0.8,
col = c("black", "red", "blue", "green4", "purple", "orange", "pink", "brown", "yellow2", "gray"),
text.col = "black" ,lwd = c(2, 2, 2),
y.intersp = 1.5, merge = FALSE, bg = "gray95")
latenzVBQoS21Byte<-latenzVBQoS2[latenzVBQoS2$Size == "1Byte",]
latenzVBQoS210Byte<-latenzVBQoS2[latenzVBQoS2$Size == "10Byte",]
latenzVBQoS2100Byte<-latenzVBQoS2[latenzVBQoS2$Size == "100Byte",]
latenzVBQoS21KByte<-latenzVBQoS2[latenzVBQoS2$Size == "1KByte",]
latenzVBQoS21500Byte<-latenzVBQoS2[latenzVBQoS2$Size == "1500Byte",]
latenzVBQoS210KByte<-latenzVBQoS2[latenzVBQoS2$Size == "10KByte",]
latenzVBQoS2100KByte<-latenzVBQoS2[latenzVBQoS2$Size == "100KByte",]
latenzVBQoS2500KByte<-latenzVBQoS2[latenzVBQoS2$Size == "500KByte",]
latenzVBQoS21MByte<-latenzVBQoS2[latenzVBQoS2$Size == "1MByte",]
latenzVBQoS210MByte<-latenzVBQoS2[latenzVBQoS2$Size == "10MByte",]
plot(latenzVBQoS21Byte$id, latenzVBQoS21Byte$rtt, type = "l", main = "RTT QoS2_1Byte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS210Byte$id, latenzVBQoS210Byte$rtt, type = "l", main = "RTT QoS2_10Byte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS2100Byte$id, latenzVBQoS2100Byte$rtt, type = "l", main = "RTT QoS2_100Byte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS21KByte$id, latenzVBQoS21KByte$rtt, type = "l", main = "RTT QoS2_1KByte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS21500Byte$id, latenzVBQoS21500Byte$rtt, type = "l", main = "RTT QoS2_1500Byte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS210KByte$id, latenzVBQoS210KByte$rtt, type = "l", main = "RTT QoS2_10KByte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS2100KByte$id, latenzVBQoS2100KByte$rtt, type = "l", main = "RTT QoS2_100KByte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS2500KByte$id, latenzVBQoS2500KByte$rtt, type = "l", main = "RTT QoS2_500KByte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS21MByte$id, latenzVBQoS21MByte$rtt, type = "l", main = "RTT QoS2_1MByte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS210MByte$id, latenzVBQoS210MByte$rtt, type = "l", main = "RTT QoS2_10MByte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
## QoS2 - Aufsplittung - eine Grafik!
plot(latenzVBQoS21Byte$id, latenzVBQoS21Byte$rtt, type = "l", ylim = c(0, 0.18), ylab = "RTT (in Sek)", xlab = "Paket_ID",
main = "Aufsplittung aller Messungen mit QoS_0 nach Paketgröße")
points(latenzVBQoS210Byte$id, latenzVBQoS210Byte$rtt, col = "red", type = "l")
points(latenzVBQoS2100Byte$id, latenzVBQoS2100Byte$rtt, col = "blue", type = "l")
points(latenzVBQoS21KByte$id, latenzVBQoS21KByte$rtt, col = "green4", type = "l")
points(latenzVBQoS21500Byte$id, latenzVBQoS21500Byte$rtt, col = "purple", type = "l")
points(latenzVBQoS210KByte$id, latenzVBQoS210KByte$rtt, col = "orange",  type = "l")
points(latenzVBQoS2100KByte$id, latenzVBQoS2100KByte$rtt, col = "pink", type = "l")
points(latenzVBQoS2500KByte$id, latenzVBQoS2500KByte$rtt, col = "brown", type = "l")
points(latenzVBQoS21MByte$id, latenzVBQoS21MByte$rtt, col = "yellow2", type = "l")
points(latenzVBQoS210MByte$id, latenzVBQoS210MByte$rtt, col = "gray", type = "l")
legend("right", c("1Byte", "10Byte", "100Byte", "1KByte", "1500Byte", "10KByte", "100KByte", "500KByte", "1MByte", "10MByte"),
cex = 0.8,
col = c("black", "red", "blue", "green4", "purple", "orange", "pink", "brown", "yellow2", "gray"),
text.col = "black" ,lwd = c(2, 2, 2),
y.intersp = 1.5, merge = FALSE, bg = "gray95")
#################################
# Aufsplittung QoS nach PL_Proz #
#################################
PLoss_LogsQoS0_1PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 1,]
knitr::opts_chunk$set(error=TRUE,        # Keep compiling upon error
collapse=TRUE,     # collapse by default
echo=TRUE,         # echo code by default
comment = "#>",    # change comment character
fig.width = 7,     # set figure width
out.width = "100%", # set width of displayed images
warning=FALSE,      # show R warnings
message=FALSE)     # show R messages
setwd("/home/lisa/Darmstadt/05_Speicher und Datennetze IoT/Praktikum/Git/mqtt-qos-rountrip/R_Analysis/03_PLoss/")
options(digits.secs=3) # needs to be set from time to time - otherwise R doesn't allow for ms
library("data.table", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("h2o", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("tidyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("plyr")
library(kableExtra)
load("./latenzPL1proz.Rda")
load("./latenzPL5proz.Rda")
load("./latenzPL10proz.Rda")
load("./latenzPL15proz.Rda")
load("./latenzPL20proz.Rda")
load("./latenzPL25proz.Rda")
load("./latenzPL30proz.Rda")
#files <- list.files(pattern = "*bps.Rda", full.names = TRUE, recursive = FALSE)
files <- c("latenzPL1proz", "latenzPL5proz", "latenzPL10proz", "latenzPL15proz", "latenzPL20proz", "latenzPL25proz", "latenzPL30proz")
latenzPL1proz$PL_Proz <- 1
latenzPL5proz$PL_Proz <- 5
latenzPL10proz$PL_Proz <- 10
latenzPL15proz$PL_Proz <- 15
latenzPL20proz$PL_Proz <- 20
latenzPL25proz$PL_Proz <- 25
latenzPL30proz$PL_Proz <- 30
PLoss_Logs <- rbind(latenzPL1proz, latenzPL5proz, latenzPL10proz, latenzPL15proz, latenzPL20proz, latenzPL25proz, latenzPL30proz)
PLoss_Logs$Byte<-PLoss_Logs$Size
PLoss_Logs$Byte[PLoss_Logs$Byte == "1Byte"] <- 1
PLoss_Logs$Byte[PLoss_Logs$Byte == "10Byte"] <- 10
PLoss_Logs$Byte[PLoss_Logs$Byte == "100Byte"] <- 100
PLoss_Logs$Byte[PLoss_Logs$Byte == "1KByte"] <- 1000
PLoss_Logs$Byte[PLoss_Logs$Byte == "1500Byte"] <- 1500
PLoss_Logs$Byte[PLoss_Logs$Byte == "10KByte"] <- 10000
PLoss_Logs$Byte[PLoss_Logs$Byte == "100KByte"] <- 100000
PLoss_Logs$Byte[PLoss_Logs$Byte == "500KByte"] <- 500000
PLoss_Logs$Byte[PLoss_Logs$Byte == "1MByte"] <- 1000000
PLoss_LogsSum <- summary(PLoss_Logs)
#PLoss_LogsAgg <- aggregate(PLoss_Logs$rtt ~ PLoss_Logs$QoS+PLoss_Logs$Size+PLoss_Logs$Byte, PLoss_Logs, mean)
PLoss_LogsAgg <- aggregate(PLoss_Logs$rtt ~ PLoss_Logs$QoS+ PLoss_Logs$PL_Proz, PLoss_Logs, mean)
#PLoss_LogsAgg$`tcLogs$Byte`<-as.numeric(PLoss_LogsAgg$`tcLogs$Byte`)
#PLoss_LogsAgg<-PLoss_LogsAgg[order(PLoss_LogsAgg$`tcLogs$Byte`),]
PLoss_LogsAgg %>%
kable() %>%
kable_styling()
PLoss_LogsAgg$Names <- paste(PLoss_LogsAgg$`PLoss_Logs$QoS`, PLoss_LogsAgg$`PLoss_Logs$PL_Proz`)
#PLoss_LogsAgg<-PLoss_LogsAgg[order(PLoss_LogsAgg$`tcLogs$Byte`),]
barplot(PLoss_LogsAgg$`PLoss_Logs$rtt`, main = "Latenz TC nach QoS und Paketgröße", ylab = "RTT in Sekunden", axes=TRUE, names.arg=PLoss_LogsAgg$Names, cex.names=0.7, las=2)
########################
# Aufsplittung nach PL #
########################
PLoss_Logs_1PL<-PLoss_Logs[PLoss_Logs$PL_Proz == 1,]
PLoss_Logs_5PL<-PLoss_Logs[PLoss_Logs$PL_Proz == 5,]
PLoss_Logs_10PL<-PLoss_Logs[PLoss_Logs$PL_Proz == 10,]
PLoss_Logs_15PL<-PLoss_Logs[PLoss_Logs$PL_Proz == 15,]
PLoss_Logs_20PL<-PLoss_Logs[PLoss_Logs$PL_Proz == 20,]
PLoss_Logs_25PL<-PLoss_Logs[PLoss_Logs$PL_Proz == 25,]
PLoss_Logs_30PL<-PLoss_Logs[PLoss_Logs$PL_Proz == 30,]
############################
# Aufsplittung PL nach QoS #
############################
PLoss_Logs_1PL_QoS0<-PLoss_Logs_1PL[PLoss_Logs_1PL$QoS == "qos0",]
PLoss_Logs_1PL_QoS1<-PLoss_Logs_1PL[PLoss_Logs_1PL$QoS == "qos1",]
PLoss_Logs_1PL_QoS2<-PLoss_Logs_1PL[PLoss_Logs_1PL$QoS == "qos2",]
PLoss_Logs_5PL_QoS0<-PLoss_Logs_5PL[PLoss_Logs_5PL$QoS == "qos0",]
PLoss_Logs_5PL_QoS1<-PLoss_Logs_5PL[PLoss_Logs_5PL$QoS == "qos1",]
PLoss_Logs_5PL_QoS2<-PLoss_Logs_5PL[PLoss_Logs_5PL$QoS == "qos2",]
PLoss_Logs_10PL_QoS0<-PLoss_Logs_10PL[PLoss_Logs_10PL$QoS == "qos0",]
PLoss_Logs_10PL_QoS1<-PLoss_Logs_10PL[PLoss_Logs_10PL$QoS == "qos1",]
PLoss_Logs_10PL_QoS2<-PLoss_Logs_10PL[PLoss_Logs_10PL$QoS == "qos2",]
PLoss_Logs_15PL_QoS0<-PLoss_Logs_15PL[PLoss_Logs_15PL$QoS == "qos0",]
PLoss_Logs_15PL_QoS1<-PLoss_Logs_15PL[PLoss_Logs_15PL$QoS == "qos1",]
PLoss_Logs_15PL_QoS2<-PLoss_Logs_15PL[PLoss_Logs_15PL$QoS == "qos2",]
PLoss_Logs_20PL_QoS0<-PLoss_Logs_20PL[PLoss_Logs_20PL$QoS == "qos0",]
PLoss_Logs_20PL_QoS1<-PLoss_Logs_20PL[PLoss_Logs_20PL$QoS == "qos1",]
PLoss_Logs_20PL_QoS2<-PLoss_Logs_20PL[PLoss_Logs_20PL$QoS == "qos2",]
PLoss_Logs_25PL_QoS0<-PLoss_Logs_25PL[PLoss_Logs_25PL$QoS == "qos0",]
PLoss_Logs_25PL_QoS1<-PLoss_Logs_25PL[PLoss_Logs_25PL$QoS == "qos1",]
PLoss_Logs_25PL_QoS2<-PLoss_Logs_25PL[PLoss_Logs_25PL$QoS == "qos2",]
PLoss_Logs_30PL_QoS0<-PLoss_Logs_30PL[PLoss_Logs_30PL$QoS == "qos0",]
PLoss_Logs_30PL_QoS1<-PLoss_Logs_30PL[PLoss_Logs_30PL$QoS == "qos1",]
PLoss_Logs_30PL_QoS2<-PLoss_Logs_30PL[PLoss_Logs_30PL$QoS == "qos2",]
#rttQoS0<-get(namesTime[1])
#rttQoS1<-get(namesTime[2])
#rttQoS2<-get(namesTime[3])
par(mfrow = c(1, 1))
######
# 1% #
######
plot(PLoss_Logs_1PL_QoS0$id, PLoss_Logs_1PL_QoS0$rtt, main = "RTT Paketloss 1% (10KByte, 1PproSek)",
ylim = c(0, 0.3), ylab = "RTT (in Sek)", xlab = "Paket_ID", type = "b")
points(PLoss_Logs_1PL_QoS1$id, PLoss_Logs_1PL_QoS1$rtt, col = "red", type = "b")
points(PLoss_Logs_1PL_QoS2$id, PLoss_Logs_1PL_QoS2$rtt, col = "blue", type = "b")
legend("topleft", c("QoS0", "QoS1", "QoS2"), text.width = 4,
col = c("black", "red", "blue"),
text.col = "black", cex = 1  ,lwd = c(2, 2, 2),
y.intersp = 1.5, merge = FALSE, bg = "gray95")
######
# 5% #
######
plot(PLoss_Logs_5PL_QoS0$id, PLoss_Logs_5PL_QoS0$rtt, main = "RTT Paketloss 5% (10KByte, 1PproSek)",
ylim = c(0, 1.2), ylab = "RTT (in Sek)", xlab = "Paket_ID", type = "b")
points(PLoss_Logs_5PL_QoS1$id, PLoss_Logs_5PL_QoS1$rtt, col = "red", type = "b")
points(PLoss_Logs_5PL_QoS2$id, PLoss_Logs_5PL_QoS2$rtt, col = "blue", type = "b")
legend("topleft", c("QoS0", "QoS1", "QoS2"), text.width = 4,
col = c("black", "red", "blue"),
text.col = "black", cex = 1  ,lwd = c(2, 2, 2),
y.intersp = 1.5, merge = FALSE, bg = "gray95")
#######
# 10% #
#######
plot(PLoss_Logs_10PL_QoS0$id, PLoss_Logs_10PL_QoS0$rtt, main = "RTT Paketloss 10% (10KByte, 1PproSek)",
ylim = c(0,1.8), ylab = "RTT (in Sek)", xlab = "Paket_ID", type = "b")
points(PLoss_Logs_10PL_QoS1$id, PLoss_Logs_10PL_QoS1$rtt, col = "red", type = "b")
points(PLoss_Logs_10PL_QoS2$id, PLoss_Logs_10PL_QoS2$rtt, col = "blue", type = "b")
legend("topleft", c("QoS0", "QoS1", "QoS2"), text.width = 3, cex = 0.6,
col = c("black", "red", "blue"),
text.col = "black", lwd = c(2, 2, 2),
y.intersp = 1.5, merge = FALSE, bg = "gray95")
#######
# 15% #
#######
plot(PLoss_Logs_15PL_QoS0$id, PLoss_Logs_15PL_QoS0$rtt, main = "RTT Paketloss 15% (10KByte, 1PproSek)",
ylab = "RTT (in Sek)", xlab = "Paket_ID", type = "b")
points(PLoss_Logs_15PL_QoS1$id, PLoss_Logs_15PL_QoS1$rtt, col = "red", type = "b")
points(PLoss_Logs_15PL_QoS2$id, PLoss_Logs_15PL_QoS2$rtt, col = "blue", type = "b")
legend("topleft", c("QoS0", "QoS1", "QoS2"), text.width = 4,
col = c("black", "red", "blue"),
text.col = "black", cex = 1  ,lwd = c(2, 2, 2),
y.intersp = 1.5, merge = FALSE, bg = "gray95")
#######
# 20% #
#######
plot(PLoss_Logs_20PL_QoS0$id, PLoss_Logs_20PL_QoS0$rtt, main = "RTT Paketloss 20% (10KByte, 1PproSek)",
ylab = "RTT (in Sek)", xlab = "Paket_ID", type = "b")
points(PLoss_Logs_20PL_QoS1$id, PLoss_Logs_20PL_QoS1$rtt, col = "red", type = "b")
points(PLoss_Logs_20PL_QoS2$id, PLoss_Logs_20PL_QoS2$rtt, col = "blue", type = "b")
legend("top", c("QoS0", "QoS1", "QoS2"), text.width = 3.5, cex = 0.7,
col = c("black", "red", "blue"),
text.col = "black", lwd = c(2, 2, 2),
y.intersp = 1.5, merge = FALSE, bg = "gray95")
#######
# 25% #
#######
plot(PLoss_Logs_25PL_QoS0$id, PLoss_Logs_25PL_QoS0$rtt, main = "RTT Paketloss 25% (10KByte, 1PproSek)",
ylim = c(0, 50), ylab = "RTT (in Sek)", xlab = "Paket_ID", type = "b")
points(PLoss_Logs_25PL_QoS1$id, PLoss_Logs_25PL_QoS1$rtt, col = "red", type = "b")
points(PLoss_Logs_25PL_QoS2$id, PLoss_Logs_25PL_QoS2$rtt, col = "blue", type = "b")
legend("top", c("QoS0", "QoS1", "QoS2"), text.width = 2.5, cex = 0.7,
col = c("black", "red", "blue"),
text.col = "black", lwd = c(2, 2, 2),
y.intersp = 1.5, merge = FALSE, bg = "gray95")
#######
# 30% #
#######
plot(PLoss_Logs_30PL_QoS0$id, PLoss_Logs_30PL_QoS0$rtt, main = "RTT Paketloss 30% (10KByte, 1PproSek)",
ylim = c(0, 60), ylab = "RTT (in Sek)", xlab = "Paket_ID", type = "b")
points(PLoss_Logs_30PL_QoS1$id, PLoss_Logs_30PL_QoS1$rtt, col = "red", type = "b")
points(PLoss_Logs_30PL_QoS2$id, PLoss_Logs_30PL_QoS2$rtt, col = "blue", type = "b")
legend("top", c("QoS0", "QoS1", "QoS2"), col = c("black", "red", "blue"), text.width = 2, cex = 0.7,
text.col = "black", lwd = c(2, 2, 2),
y.intersp = 1.5, merge = FALSE, bg = "gray95")
#########################
# Aufsplittung nach QoS #
#########################
PLoss_LogsQoS0<-PLoss_Logs[PLoss_Logs$QoS == "qos0",]
PLoss_LogsQoS1<-PLoss_Logs[PLoss_Logs$QoS == "qos1",]
PLoss_LogsQoS2<-PLoss_Logs[PLoss_Logs$QoS == "qos2",]
plot(PLoss_LogsQoS0$id, PLoss_LogsQoS0$rtt, type = "l", main = "RTT QoS0 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS1$id, PLoss_LogsQoS1$rtt, type = "l", main = "RTT QoS1 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS2$id, PLoss_LogsQoS2$rtt, type = "l", main = "RTT QoS2 (10KByte, 1PproSek)")
#################################
# Aufsplittung QoS nach PL_Proz #
#################################
PLoss_LogsQoS0_1PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 1,]
PLoss_LogsQoS0_5PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 5,]
PLoss_LogsQoS0_10PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 10,]
PLoss_LogsQoS0_15PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 15,]
PLoss_LogsQoS0_20PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 20,]
PLoss_LogsQoS0_25PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 25,]
PLoss_LogsQoS0_30PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 30,]
plot(PLoss_LogsQoS0_1PL$id, PLoss_LogsQoS0_1PL$rtt, type = "b", main = "RTT QoS0_PL1 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS0_5PL$id, PLoss_LogsQoS0_5PL$rtt, type = "b", main = "RTT QoS0_PL5 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS0_10PL$id, PLoss_LogsQoS0_10PL$rtt, type = "b", main = "RTT QoS0_PL10 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS0_15PL$id, PLoss_LogsQoS0_15PL$rtt, type = "b", main = "RTT QoS0_PL15 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS0_20PL$id, PLoss_LogsQoS0_20PL$rtt, type = "b", main = "RTT QoS0_PL20 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS0_25PL$id, PLoss_LogsQoS0_25PL$rtt, type = "b", main = "RTT QoS0_PL25 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS0_30PL$id, PLoss_LogsQoS0_30PL$rtt, type = "b", main = "RTT QoS0_PL30 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS0_1PL$id, PLoss_LogsQoS0_1PL$rtt, main = "RTT QoS0 (10KByte, 1PproSek)", ylim = c(0, 45),
ylab = "RTT (in Sek)", xlab = "Paket_ID", type = "l")
points(PLoss_LogsQoS0_10PL$id, PLoss_LogsQoS0_10PL$rtt, col = "red", type = "l")
points(PLoss_LogsQoS0_20PL$id, PLoss_LogsQoS0_20PL$rtt, col = "blue", type = "b")
points(PLoss_LogsQoS0_25PL$id, PLoss_LogsQoS0_25PL$rtt, col = "green4", type = "b")
points(PLoss_LogsQoS0_30PL$id, PLoss_LogsQoS0_30PL$rtt, col = "purple2", type = "b")
legend("topright", c("  1% P_loss", "10% P_loss", "20% P_loss", "25% P_loss", "30% P_loss"), text.width = 10, col = c("black", "red", "blue", "green4", "purple2"),
text.col = "black", cex = 1  ,lwd = c(2, 2, 2),
y.intersp = 1.5, merge = FALSE, bg = "gray95")
#################################
# Aufsplittung QoS nach PL_Proz #
#################################
PLoss_LogsQoS0_1PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 1,]
PLoss_LogsQoS0_5PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 5,]
PLoss_LogsQoS0_10PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 10,]
PLoss_LogsQoS0_15PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 15,]
PLoss_LogsQoS0_20PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 20,]
PLoss_LogsQoS0_25PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 25,]
PLoss_LogsQoS0_30PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 30,]
plot(PLoss_LogsQoS0_1PL$id, PLoss_LogsQoS0_1PL$rtt, type = "b", main = "RTT QoS0_PL1 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS0_5PL$id, PLoss_LogsQoS0_5PL$rtt, type = "b", main = "RTT QoS0_PL5 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS0_10PL$id, PLoss_LogsQoS0_10PL$rtt, type = "b", main = "RTT QoS0_PL10 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS0_15PL$id, PLoss_LogsQoS0_15PL$rtt, type = "b", main = "RTT QoS0_PL15 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS0_20PL$id, PLoss_LogsQoS0_20PL$rtt, type = "b", main = "RTT QoS0_PL20 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS0_25PL$id, PLoss_LogsQoS0_25PL$rtt, type = "b", main = "RTT QoS0_PL25 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS0_30PL$id, PLoss_LogsQoS0_30PL$rtt, type = "b", main = "RTT QoS0_PL30 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS0_1PL$id, PLoss_LogsQoS0_1PL$rtt, main = "RTT QoS0 (10KByte, 1PproSek)", ylim = c(0, 60),
ylab = "RTT (in Sek)", xlab = "Paket_ID", type = "l")
points(PLoss_LogsQoS0_10PL$id, PLoss_LogsQoS0_10PL$rtt, col = "red", type = "l")
points(PLoss_LogsQoS0_20PL$id, PLoss_LogsQoS0_20PL$rtt, col = "blue", type = "b")
points(PLoss_LogsQoS0_25PL$id, PLoss_LogsQoS0_25PL$rtt, col = "green4", type = "b")
points(PLoss_LogsQoS0_30PL$id, PLoss_LogsQoS0_30PL$rtt, col = "purple2", type = "b")
legend("topright", c("  1% P_loss", "10% P_loss", "20% P_loss", "25% P_loss", "30% P_loss"), text.width = 10, col = c("black", "red", "blue", "green4", "purple2"),
text.col = "black", cex = 1  ,lwd = c(2, 2, 2),
y.intersp = 1.5, merge = FALSE, bg = "gray95")
#################################
# Aufsplittung QoS nach PL_Proz #
#################################
PLoss_LogsQoS0_1PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 1,]
PLoss_LogsQoS0_5PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 5,]
PLoss_LogsQoS0_10PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 10,]
PLoss_LogsQoS0_15PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 15,]
PLoss_LogsQoS0_20PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 20,]
PLoss_LogsQoS0_25PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 25,]
PLoss_LogsQoS0_30PL<-PLoss_LogsQoS0[PLoss_LogsQoS0$PL_Proz == 30,]
plot(PLoss_LogsQoS0_1PL$id, PLoss_LogsQoS0_1PL$rtt, type = "b", main = "RTT QoS0_PL1 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS0_5PL$id, PLoss_LogsQoS0_5PL$rtt, type = "b", main = "RTT QoS0_PL5 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS0_10PL$id, PLoss_LogsQoS0_10PL$rtt, type = "b", main = "RTT QoS0_PL10 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS0_15PL$id, PLoss_LogsQoS0_15PL$rtt, type = "b", main = "RTT QoS0_PL15 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS0_20PL$id, PLoss_LogsQoS0_20PL$rtt, type = "b", main = "RTT QoS0_PL20 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS0_25PL$id, PLoss_LogsQoS0_25PL$rtt, type = "b", main = "RTT QoS0_PL25 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS0_30PL$id, PLoss_LogsQoS0_30PL$rtt, type = "b", main = "RTT QoS0_PL30 (10KByte, 1PproSek)")
plot(PLoss_LogsQoS0_1PL$id, PLoss_LogsQoS0_1PL$rtt, main = "RTT QoS0 (10KByte, 1PproSek)", ylim = c(0, 60),
ylab = "RTT (in Sek)", xlab = "Paket_ID", type = "l")
points(PLoss_LogsQoS0_10PL$id, PLoss_LogsQoS0_10PL$rtt, col = "red", type = "l")
points(PLoss_LogsQoS0_20PL$id, PLoss_LogsQoS0_20PL$rtt, col = "blue", type = "l")
points(PLoss_LogsQoS0_25PL$id, PLoss_LogsQoS0_25PL$rtt, col = "green4", type = "b")
points(PLoss_LogsQoS0_30PL$id, PLoss_LogsQoS0_30PL$rtt, col = "purple2", type = "b")
legend("topright", c("  1% P_loss", "10% P_loss", "20% P_loss", "25% P_loss", "30% P_loss"), text.width = 10, col = c("black", "red", "blue", "green4", "purple2"),
text.col = "black", cex = 1  ,lwd = c(2, 2, 2),
y.intersp = 1.5, merge = FALSE, bg = "gray95")
setwd("/home/lisa/Darmstadt/05_Speicher und Datennetze IoT/Praktikum/Git/mqtt-qos-rountrip/R_Analysis/01_RTT_Pi_VB/")
options(digits.secs=3) # needs to be set from time to time - otherwise R doesn't allow for ms
library("data.table", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("h2o", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("tidyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("plyr")
library(knitr)
library(kableExtra)
load("./latenzVB.Rda")
load("./logs_pi.Rda")
setwd("/home/lisa/Darmstadt/05_Speicher und Datennetze IoT/Praktikum/Git/mqtt-qos-rountrip/R_Analysis/01_RTT_Pi_VB/")
options(digits.secs=3) # needs to be set from time to time - otherwise R doesn't allow for ms
library("data.table", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("h2o", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("tidyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("plyr")
library(knitr)
library(kableExtra)
load("./latenzVB.Rda")
latenzVB[,5]<-NA
latenzVB<-latenzVB[latenzVB$Size != "500KByte"]
latenzVB<-latenzVB[latenzVB$Size != "500KByte",]
latenzVB[,5]<-NA
latenzVB<-latenzVB[latenzVB$Size != "500KByte",] # ausfiltern der 500KByte Daten
rtt_zero<-latenzVB[latenzVB$rtt == 0,]
latenzVB<-latenzVB[latenzVB$rtt > 0,]
latenzVB$Byte<-latenzVB$Size
latenzVB$Byte[latenzVB$Byte == "1Byte"] <- 1
latenzVB$Byte[latenzVB$Byte == "10Byte"] <- 10
latenzVB$Byte[latenzVB$Byte == "100Byte"] <- 100
latenzVB$Byte[latenzVB$Byte == "1KByte"] <- 1000
latenzVB$Byte[latenzVB$Byte == "1500Byte"] <- 1500
latenzVB$Byte[latenzVB$Byte == "10KByte"] <- 10000
latenzVB$Byte[latenzVB$Byte == "100KByte"] <- 100000
latenzVB$Byte[latenzVB$Byte == "500KByte"] <- 500000
latenzVB$Byte[latenzVB$Byte == "1MByte"] <- 1000000
latenzVB$Byte[latenzVB$Byte == "10MByte"] <- 10000000
latenzVBSum <- summary(latenzVB)
latenzVBSum
logsVBAgg <- aggregate(latenzVB$rtt ~ latenzVB$QoS+latenzVB$Size+latenzVB$Byte, latenzVB, mean)
logsVBAgg$`latenzVB$Byte`<-as.numeric(logsVBAgg$`latenzVB$Byte`)
logsVBAgg<-logsVBAgg[order(logsVBAgg$`latenzVB$Byte`),]
logsVBAgg %>%
kable() %>%
kable_styling()
logsVBAgg$Names <- paste(logsVBAgg$`latenzVB$QoS`, logsVBAgg$`latenzVB$Size`)
logsVBAgg<-logsVBAgg[order(logsVBAgg$`latenzVB$Byte`),]
barplot(logsVBAgg$`latenzVB$rtt`, main = "Latenz Laptop nach QoS und Paketgröße", ylab = "RTT in Sekunden", axes=TRUE, names.arg=logsVBAgg$Names, cex.names=0.7, las=2)
logsVBAgg_no500<-logsVBAgg[logsVBAgg$`latenzVB$Byte`!=500000,]
logsVBAgg_no500$Names <- paste(logsVBAgg_no500$`latenzVB$QoS`, logsVBAgg_no500$`latenzVB$Size`)
barplot(logsVBAgg_no500$`latenzVB$rtt`, main = "Latenz Laptop nach QoS und Paketgröße", ylab = "RTT in Sekunden", axes=TRUE, names.arg=logsVBAgg_no500$Names, cex.names=0.7, las=2)
logsVBAgg_no500_no100M<-logsVBAgg[logsVBAgg$`latenzVB$Byte`!=500000 & logsVBAgg$`latenzVB$Byte`!= 10000000,]
logsVBAgg_no500_no100M$Names <- paste(logsVBAgg_no500_no100M$`latenzVB$QoS`, logsVBAgg_no500_no100M$`latenzVB$Size`)
barplot(logsVBAgg_no500_no100M$`latenzVB$rtt`, main = "Latenz Laptop nach QoS und Paketgröße", ylab = "RTT in Sekunden", axes=TRUE, names.arg=logsVBAgg_no500_no100M$Names, cex.names=0.7, las=2)
logsVBAgg$Names <- paste(logsVBAgg$`latenzVB$QoS`, logsVBAgg$`latenzVB$Size`)
logsVBAgg<-logsVBAgg[order(logsVBAgg$`latenzVB$Byte`),]
barplot(logsVBAgg$`latenzVB$rtt`, main = "Latenz Laptop nach QoS und Paketgröße", ylab = "RTT in Sekunden", axes=TRUE, names.arg=logsVBAgg$Names, cex.names=0.7, las=2)
logsVBAgg_no500_no100M<-logsVBAgg[logsVBAgg$`latenzVB$Byte`!=500000 & logsVBAgg$`latenzVB$Byte`!= 10000000,]
logsVBAgg_no500_no100M$Names <- paste(logsVBAgg_no500_no100M$`latenzVB$QoS`, logsVBAgg_no500_no100M$`latenzVB$Size`)
barplot(logsVBAgg_no500_no100M$`latenzVB$rtt`, main = "Latenz Laptop nach QoS und Paketgröße", ylab = "RTT in Sekunden", axes=TRUE, names.arg=logsVBAgg_no500_no100M$Names, cex.names=0.7, las=2)
reg_LogsPi <- lm(logsPi$rtt~logsPi$QoS+logsPi$Byte, data = logsPi)
reg_LogsVB <- lm(latenzVB$rtt~latenzVB$QoS+latenzVB$Byte, data = latenzVB)
summary(reg_LogsVB)
par(mfrow=c(1,2))
plot(logsPi$Byte, logsPi$rtt)
par(mfrow=c(1,2))
qqnorm(logsPi$rtt, main = "Q-Q Plot Pi")
par(mfrow=c(1,2))
qqnorm(latenzVB$rtt, main = "Q-Q Plot Laptop")
par(mfrow=c(1,2))
qqnorm(log(logsPi$rtt), main = "Q-Q Plot Pi")
par(mfrow=c(2,1))
qqnorm(latenzVB$rtt, main = "Q-Q Plot Laptop")
qqnorm(log(latenzVB$rtt), main = "Q-Q Plot Log Transformation")
par(mfrow=c(1,2))
qqnorm(latenzVB$rtt, main = "Q-Q Plot Laptop")
qqnorm(log(latenzVB$rtt), main = "Q-Q Plot Log Transformation")
par(mfrow=c(2,1))
plot(density(log(latenzVB$rtt)))
######################
# Aufteilen nach QoS #
######################
latenzVBQoS0<-latenzVB[latenzVB$QoS == "qos0",]
latenzVBQoS1<-latenzVB[latenzVB$QoS == "qos1",]
latenzVBQoS2<-latenzVB[latenzVB$QoS == "qos2",]
plot(latenzVBQoS0$id, latenzVBQoS0$rtt, type = "l", main = "RTT QoS0",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS1$id, latenzVBQoS1$rtt, type = "l", main = "RTT QoS1",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS2$id, latenzVBQoS2$rtt, type = "l", main = "RTT QoS2",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
knitr::opts_chunk$set(error=TRUE,        # Keep compiling upon error
collapse=TRUE,     # collapse by default
echo=TRUE,         # echo code by default
comment = "#>",    # change comment character
fig.width = 7,     # set figure width
out.width = "100%", # set width of displayed images
warning=FALSE,      # show R warnings
message=FALSE)     # show R messages
setwd("/home/lisa/Darmstadt/05_Speicher und Datennetze IoT/Praktikum/Git/mqtt-qos-rountrip/R_Analysis/01_RTT_Pi_VB/")
options(digits.secs=3) # needs to be set from time to time - otherwise R doesn't allow for ms
library("data.table", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("h2o", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("tidyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("plyr")
library(knitr)
library(kableExtra)
load("./latenzVB.Rda")
latenzVB[,5]<-NA
latenzVB<-latenzVB[latenzVB$Size != "500KByte",] # ausfiltern der 500KByte Daten
rtt_zero<-latenzVB[latenzVB$rtt == 0,]
latenzVB<-latenzVB[latenzVB$rtt > 0,]
latenzVB$Byte<-latenzVB$Size
latenzVB$Byte[latenzVB$Byte == "1Byte"] <- 1
latenzVB$Byte[latenzVB$Byte == "10Byte"] <- 10
latenzVB$Byte[latenzVB$Byte == "100Byte"] <- 100
latenzVB$Byte[latenzVB$Byte == "1KByte"] <- 1000
latenzVB$Byte[latenzVB$Byte == "1500Byte"] <- 1500
latenzVB$Byte[latenzVB$Byte == "10KByte"] <- 10000
latenzVB$Byte[latenzVB$Byte == "100KByte"] <- 100000
latenzVB$Byte[latenzVB$Byte == "500KByte"] <- 500000
latenzVB$Byte[latenzVB$Byte == "1MByte"] <- 1000000
latenzVB$Byte[latenzVB$Byte == "10MByte"] <- 10000000
latenzVBSum <- summary(latenzVB)
latenzVBSum
logsVBAgg <- aggregate(latenzVB$rtt ~ latenzVB$QoS+latenzVB$Size+latenzVB$Byte, latenzVB, mean)
logsVBAgg$`latenzVB$Byte`<-as.numeric(logsVBAgg$`latenzVB$Byte`)
logsVBAgg<-logsVBAgg[order(logsVBAgg$`latenzVB$Byte`),]
logsVBAgg %>%
kable() %>%
kable_styling()
logsVBAgg$Names <- paste(logsVBAgg$`latenzVB$QoS`, logsVBAgg$`latenzVB$Size`)
logsVBAgg<-logsVBAgg[order(logsVBAgg$`latenzVB$Byte`),]
barplot(logsVBAgg$`latenzVB$rtt`, main = "Latenz Laptop nach QoS und Paketgröße", ylab = "RTT in Sekunden", axes=TRUE, names.arg=logsVBAgg$Names, cex.names=0.7, las=2)
logsVBAgg_no500_no100M<-logsVBAgg[logsVBAgg$`latenzVB$Byte`!=500000 & logsVBAgg$`latenzVB$Byte`!= 10000000,]
logsVBAgg_no500_no100M$Names <- paste(logsVBAgg_no500_no100M$`latenzVB$QoS`, logsVBAgg_no500_no100M$`latenzVB$Size`)
barplot(logsVBAgg_no500_no100M$`latenzVB$rtt`, main = "Latenz Laptop nach QoS und Paketgröße", ylab = "RTT in Sekunden", axes=TRUE, names.arg=logsVBAgg_no500_no100M$Names, cex.names=0.7, las=2)
######################
# Aufteilen nach QoS #
######################
latenzVBQoS0<-latenzVB[latenzVB$QoS == "qos0",]
latenzVBQoS1<-latenzVB[latenzVB$QoS == "qos1",]
latenzVBQoS2<-latenzVB[latenzVB$QoS == "qos2",]
plot(latenzVBQoS0$id, latenzVBQoS0$rtt, type = "l", main = "RTT QoS0",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS1$id, latenzVBQoS1$rtt, type = "l", main = "RTT QoS1",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS2$id, latenzVBQoS2$rtt, type = "l", main = "RTT QoS2",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
#######################################
# QoS_0 Aufteilen nach Payload/ Größe #
#######################################
latenzVBQoS01Byte<-latenzVBQoS0[latenzVBQoS0$Size == "1Byte",]
latenzVBQoS010Byte<-latenzVBQoS0[latenzVBQoS0$Size == "10Byte",]
latenzVBQoS0100Byte<-latenzVBQoS0[latenzVBQoS0$Size == "100Byte",]
latenzVBQoS01KByte<-latenzVBQoS0[latenzVBQoS0$Size == "1KByte",]
latenzVBQoS01500Byte<-latenzVBQoS0[latenzVBQoS0$Size == "1500Byte",]
latenzVBQoS010KByte<-latenzVBQoS0[latenzVBQoS0$Size == "10KByte",]
latenzVBQoS0100KByte<-latenzVBQoS0[latenzVBQoS0$Size == "100KByte",]
latenzVBQoS0500KByte<-latenzVBQoS0[latenzVBQoS0$Size == "500KByte",]
latenzVBQoS01MByte<-latenzVBQoS0[latenzVBQoS0$Size == "1MByte",]
latenzVBQoS010MByte<-latenzVBQoS0[latenzVBQoS0$Size == "10MByte",]
plot(latenzVBQoS01Byte$id, latenzVBQoS01Byte$rtt, type = "l", main = "RTT QoS0_1Byte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS010Byte$id, latenzVBQoS010Byte$rtt, type = "l", main = "RTT QoS0_10Byte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS0100Byte$id, latenzVBQoS0100Byte$rtt, type = "l", main = "RTT QoS0_100Byte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS01KByte$id, latenzVBQoS01KByte$rtt, type = "l", main = "RTT QoS0_1KByte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS01500Byte$id, latenzVBQoS01500Byte$rtt, type = "l", main = "RTT QoS0_1500Byte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS010KByte$id, latenzVBQoS010KByte$rtt, type = "l", main = "RTT QoS0_10KByte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS0100KByte$id, latenzVBQoS0100KByte$rtt, type = "l", main = "RTT QoS0_100KByte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
plot(latenzVBQoS0500KByte$id, latenzVBQoS0500KByte$rtt, type = "l", main = "RTT QoS0_500KByte",
ylab = "RTT (in Sek)", xlab = "Paket_ID")
